The State of Go
Golang SG Meetup
18 Feb 2016

* Release timeline:

- [[http://blog.golang.org/the-path-to-go-1][Go 1.0]] released 28th March, 2012
- [[http://talks.golang.org/2013/go1.1.slide#1][Go 1.1]] released 13th May, 2013
- Go 1.2 released 1st December, 2013
- Go 1.3 released 18th June, 2014
- Go 1.4 released 10th December, 2014
- [[https://talks.golang.org/2015/state-of-go.slide#8][Go 1.5]] released 19th August, 2015
- Go 1.6 is expected to be released February, 2016


* Go 1.6

.link https://golang.org/dl/

.image go1.6/GoLaunch_Front.png 440 _

_Credit_: [[http://www.meetup.com/golangsf/events/226090306/][iron.io / GoSF Meetup]].

* What is new

.link https://tip.golang.org/doc/go1.6

Slides:

.link https://talks.golang.org/2016/state-of-go.slide#1 


* Standard library

- net/http
- {text,html}/template
- sort


* net/http

https in Go 1.6 = http/2

* http2 in Go 1.5

.play http2/http2server.go

* http2 in Go 1.6

.play http2/http2server2.go

* {text,html}/template

.play template/block.go

*sort

- sort.Sort is faster in 1.6 (~10%)
- sort.Stable for stable sort

* Sharing pointers between Go and C

.play go1.6/cgo.go

* Runtime 

The runtime has added lightweight, best-effort detection of concurrent misuse of maps.

.play go1.6/crashy.go /START OMIT/,/END OMIT/

* Supported platforms

Go 1.6 supports the following operating systems:

- Windows, OSX (darwin), Android, iOS, NaCl, DragonflyBSD, FreeBSD, Linux, NetBSD, OpenBSD, Plan 9, Solaris/Illumos

Go 1.6 supports the following CPU architectures:

- Intel (386 and amd64), arm (ARMv5, v6, v7), arm64, 64 bit PowerPC (big and little endian), 64 bit MIPS (big and little endian)

In the future:

- s390x (IBM Z series) planned for Go 1.7
- RISC-V may be on the horizon

* Vendor support

Go 1.5 introduced experimental support for vendoring, enabled by setting the `GO15VENDOREXPERIMENT` environment variable to 1

* How does it work?

        /home/user/gocode/
            src/
                server-one/
                    main.go            (import "github.com/gorilla/mux")
                server-two/
                    main.go            (import "github.com/gorilla/mux")
                    vendor/
                        github.com/
                            gorilla/
                                mux/
                                    ...

`server-one` uses the `mux` package in

    $GOPATH/src/github.com/gorilla/mux

`server-two` uses the `mux` package in

    $GOPATH/src/github.com/gorilla/mux/vendor/github.com/gorilla/mux

* Thank you

If you interested in talks, please email at sg.gopher@gmail.com